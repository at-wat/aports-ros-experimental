pkgname=ros-kinetic-roscpp
_pkgname=roscpp
pkgver=1.12.15
pkgrel=0
pkgdesc="$_pkgname package for ROS kinetic"
url="http://ros.org/wiki/roscpp"
arch="all"
license="BSD"

depends="ros-kinetic-cpp-common>=0.3.17 ros-kinetic-message-runtime ros-kinetic-rosconsole ros-kinetic-roscpp-serialization ros-kinetic-roscpp-traits>=0.3.17 ros-kinetic-rosgraph-msgs>=1.10.3 ros-kinetic-rostime>=0.6.4 ros-kinetic-std-msgs ros-kinetic-xmlrpcpp ros-kinetic-cpp-common>=0.3.17 ros-kinetic-message-runtime ros-kinetic-rosconsole ros-kinetic-roscpp-serialization ros-kinetic-roscpp-traits>=0.3.17 ros-kinetic-rosgraph-msgs>=1.10.3 ros-kinetic-rostime>=0.6.4 ros-kinetic-std-msgs ros-kinetic-xmlrpcpp"
makedepends="py-setuptools py-rosdep py-rosinstall py-rosinstall-generator py-wstool chrpath pkgconf ros-kinetic-catkin>=0.5.78 ros-kinetic-cpp-common>=0.3.17 ros-kinetic-message-generation ros-kinetic-rosconsole ros-kinetic-roscpp-serialization ros-kinetic-roscpp-traits>=0.3.17 ros-kinetic-rosgraph-msgs>=1.10.3 ros-kinetic-roslang ros-kinetic-rostime>=0.6.4 ros-kinetic-std-msgs ros-kinetic-xmlrpcpp"

subpackages="$pkgname-dbg"

source=""
builddir="$startdir/abuild"
srcdir="/tmp/dummy-src-dir"
buildlog="$builddir/ros-abuild-build.log"
checklog="$builddir/ros-abuild-check.log"
statuslog="$builddir/ros-abuild-status.log"
if [ x${GENERATE_BUILD_LOGS} != "xyes" ]; then
  buildlog="/dev/null"
  checklog="/dev/null"
  statuslog="/dev/null"
fi

export ROS_PYTHON_VERSION=2
rosinstall="- git: {local-name: roscpp, uri: 'https://github.com/ros-gbp/ros_comm-release.git',
    version: release/kinetic/roscpp/1.12.15-1}
"

prepare() {
  set -o pipefail
  mkdir -p $builddir
  echo "preparing" > $statuslog
  cd "$builddir"
  rm -rf src || true
  mkdir -p src
  echo "$rosinstall" > pkg.rosinstall
  wstool init --shallow src pkg.rosinstall
  find $startdir -maxdepth 1 -name "*.patch" | while read patchfile; do
    echo "Applying $patchfile"
    (cd src/* && patch -p1 -i $patchfile)
  done
}

build() {
  set -o pipefail
  echo "building" > $statuslog
  cd "$builddir"
  source /usr/ros/kinetic/setup.sh
  catkin_make_isolated \
    -DCMAKE_BUILD_TYPE=RelWithDebInfo 2>&1 | tee $buildlog
}

check() {
  if [ -f $startdir/NOCHECK ]; then
    echo "Check skipped" | tee $checklog
    return 0
  fi
  set -o pipefail
  echo "checking" >> $statuslog
  cd "$builddir"
  source /usr/ros/kinetic/setup.sh
  source devel_isolated/setup.sh
  catkin_make_isolated \
    -DCMAKE_BUILD_TYPE=RelWithDebInfo \
    --catkin-make-args run_tests 2>&1 | tee $checklog
  catkin_test_results 2>&1 | tee $checklog
}

dbg() {
  mkdir -p "$subpkgdir"
  default_dbg
}

package() {
  echo "packaging" >> $statuslog
  mkdir -p "$pkgdir"
  cd "$builddir"
  export DESTDIR="$pkgdir"

  source /usr/ros/kinetic/setup.sh
  catkin_make_isolated \
    -DCMAKE_BUILD_TYPE=RelWithDebInfo \
    --install-space /usr/ros/kinetic
  catkin_make_isolated \
    -DCMAKE_BUILD_TYPE=RelWithDebInfo \
    --install --install-space /usr/ros/kinetic
  rm -f \
    "$pkgdir"/usr/ros/kinetic/setup.* \
    "$pkgdir"/usr/ros/kinetic/local_setup.* \
    "$pkgdir"/usr/ros/kinetic/.rosinstall \
    "$pkgdir"/usr/ros/kinetic/_setup_util.py \
    "$pkgdir"/usr/ros/kinetic/env.sh \
    "$pkgdir"/usr/ros/kinetic/.catkin

  # Tweak invalid RPATH
  find $pkgdir -name "*.so" | while read so; do
    chrpath_out=$(chrpath ${so} || true)
    if echo ${chrpath_out} | grep -q "RPATH="; then
      rpath=$(echo -n "${chrpath_out}" | sed -e "s/^.*RPATH=//")
      if echo "${rpath}" | grep -q home; then
        echo "RPATH contains home!: ${rpath}"
        rpathfix=$(echo -n "${rpath}" | tr ":" "\n" \
          | grep -v -e home | tr "\n" ":" | sed -e "s/:$//; s/::/:/;")
        echo "Fixing to ${rpathfix}"
        chrpath -r ${rpathfix} ${so} || (echo chrpath failed; false)
      fi
    fi
  done

  # Tweak hardcoded library versions
  find $pkgdir -name "*.cmake" | while read cm; do
    libs=$(sed -n '/^set(libraries/{s/^.*"\(.*\)")$/\1/;s/;/ /g;p}' $cm)
    for lib in $libs; do
      rep=
      # lib.so.0.1.2 -> lib.so.0.1
      if echo $lib | grep -q -e '\.so\.[0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}$'; then
        rep=$(echo $lib | sed -e 's/\(\.so\.[0-9]\{1,\}\.[0-9]\{1,\}\)\.[0-9]\{1,\}$/\1/')
      fi
      # lib-0.1.so.2 -> lib-0.1.so
      if echo $lib | grep -q -e '-[0-9]\{1,\}\.[0-9]\{1,\}\.so\.[0-9]\{1,\}$'; then
        rep=$(echo $lib | sed -e 's/\(-[0-9]\{1,\}\.[0-9]\{1,\}\.so\)\.[0-9]\{1,\}$/\1/')
      fi

      if [ ! -z "$rep" ]; then
        if [ -f $rep ]; then
          echo "$cm: $lib -> $rep"
          sed -e "s|\([\";]\)$lib\([\";]\)|\1$rep\2|g" -i $cm
        else
          echo "$cm: $lib is specified, but $rep doesn't exist"
        fi
      fi
    done
  done

  echo "finished" >> $statuslog
}
