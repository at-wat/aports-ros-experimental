pkgname=ros-melodic-catkin
_pkgname=catkin
pkgver=0.7.19
pkgrel=0
pkgdesc="$_pkgname package for ROS melodic"
url="http://wiki.ros.org/catkin"
arch="all"
license="BSD"
depends="py2-argparse py2-catkin-pkg>=0.4.3 py2-empy cmake gmock-dev gtest gtest-dev py2-argparse py2-catkin-pkg>=0.4.3 py2-empy py2-nose"
makedepends="py-setuptools py-rosdep py-rosinstall py-rosinstall-generator py-wstool chrpath cmake py2-argparse py2-catkin-pkg>=0.4.3 py2-empy py2-mock py2-nose"
subpackages="$pkgname-dbg"
source=""
builddir="$startdir/apk-build-temporary"
srcdir="/tmp/dummy-src-dir"
buildlog="$builddir/ros-abuild-build.log"
checklog="$builddir/ros-abuild-check.log"
statuslog="$builddir/ros-abuild-status.log"
if [ x${GENERATE_BUILD_LOGS} != "xyes" ]; then
  buildlog="/dev/null"
  checklog="/dev/null"
  statuslog="/dev/null"
fi
ROS_PYTHON_VERSION=2
rosinstall="- git: {local-name: catkin, uri: 'https://github.com/ros-gbp/catkin-release.git',
    version: release/melodic/catkin/0.7.19-1}
"
prepare() {
  set -o pipefail
  mkdir -p $builddir
  echo "preparing" > $statuslog
  cd "$builddir"
  rm -rf src || true
  mkdir -p src
  echo "$rosinstall" > pkg.rosinstall
  wstool init --shallow src pkg.rosinstall
  find $startdir -maxdepth 1 -name "*.patch" | while read patchfile; do
    echo "Applying $patchfile"
    (cd src/* && patch -p1 -i $patchfile)
  done
}
build() {
  set -o pipefail
  echo "building" > $statuslog
  cd "$builddir"
  mkdir src/$_pkgname/build
  cd src/$_pkgname/build
  cmake .. -DCMAKE_INSTALL_PREFIX=/usr/ros/melodic -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_LIBDIR=lib 2>&1 | tee $buildlog
  make 2>&1 | tee -a $buildlog
}
check() {
  if [ -f $startdir/NOCHECK ]; then
    echo "Check skipped" | tee $checklog
    return 0
  fi
  set -o pipefail
  echo "checking" >> $statuslog
  cd "$builddir"
  cd src/$_pkgname/build
  if [ `make -q test > /dev/null 2> /dev/null; echo $?` -eq 1 ]; then
    make test 2>&1 | tee $checklog
  fi
}
dbg() {
  mkdir -p "$subpkgdir"
  default_dbg
}
package() {
  echo "packaging" >> $statuslog
  mkdir -p "$pkgdir"
  cd "$builddir"
  export DESTDIR="$pkgdir"
  cd src/$_pkgname/build
  make install
  find $pkgdir -name "*.so" | while read so; do
    chrpath_out=$(chrpath ${so} || true)
    if echo ${chrpath_out} | grep -q "RPATH="; then
      rpath=$(echo -n "${chrpath_out}" | sed -e "s/^.*RPATH=//")
      if echo "${rpath}" | grep -q home; then
        echo "RPATH contains home!: ${rpath}"
        rpathfix=$(echo -n "${rpath}" | tr ":" "\n" \
          | grep -v -e home | tr "\n" ":" | sed -e "s/:$//; s/::/:/;")
        echo "Fixing to ${rpathfix}"
        chrpath -r ${rpathfix} ${so} || (echo chrpath failed; false)
      fi
    fi
  done
  echo "finished" >> $statuslog
}